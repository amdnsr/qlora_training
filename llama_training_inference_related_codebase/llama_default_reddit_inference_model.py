# -*- coding: utf-8 -*-
"""llama_default_reddit_inference_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M53AOyj4fprML_IquucEddRBaGNmrrfn
"""

!pip install -U pip
!pip install accelerate==0.20.3
!pip install appdirs==1.4.4
!pip install bitsandbytes==0.39.0
!pip install datasets==2.10.1
!pip install fire==0.5.0
!pip install git+https://github.com/huggingface/peft.git
!pip install git+https://github.com/huggingface/transformers@de9255de27abfcae4a1f816b904915f0b1e23cd9
!pip install torch==2.0.0
!pip install sentencepiece==0.1.97
!pip install tensorboardX==2.6
!pip install gradio==3.23.0

import os
import sys

# import fire
# import gradio as gr
import torch
import transformers
from peft import PeftModel
from transformers import GenerationConfig, LlamaForCausalLM, LlamaTokenizer, BitsAndBytesConfig, AutoModelForCausalLM

from utils.callbacks import Iteratorize, Stream
from utils.prompter import Prompter


device_no = 0

if torch.cuda.is_available():
    device = f"cuda:{device_no}"
else:
    device = "cpu"

try:
    if torch.backends.mps.is_available():
        device = "mps"
except:  # noqa: E722
    pass

from google.colab import drive
drive.mount('/content/drive')

!ls

# !mkdir adapter_model

# !cp -r /content/drive/MyDrive/ml-models/llama_training_reddit_colab_1_ep_128b/adapter_model/ adapter_model

# template folder
# alpaca.json
# utils folder
# reddit.json
# gab.json
# solid_extended.json

prompt_template = "alpaca"
base_model = "decapoda-research/llama-7b-hf"
load_8bit = False
lora_weights = "adapter_model"
prompter = Prompter(prompt_template)
tokenizer = LlamaTokenizer.from_pretrained(base_model)
# if device == "cuda:13":
add_eos_token: bool = False
cutoff_len = CUTOFF_LEN = 256
train_on_inputs = False
prompt_template_name: str = "alpaca"

bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_use_double_quant=True,
    bnb_4bit_compute_dtype=torch.bfloat16,
)
model = AutoModelForCausalLM.from_pretrained(
    base_model,
    # quantization_config=bnb_config,
    device_map={"": device_no},
)

# DO NOT load adapters
# model = LlamaForCausalLM.from_pretrained(
#     base_model,
#     torch_dtype=torch.float16,
#     device_map="auto",
# )
# model = PeftModel.from_pretrained(
#     model,
#     lora_weights,
#     torch_dtype=torch.float16,
# )
print("reached here")


# unwind broken decapoda-research config
model.config.pad_token_id = tokenizer.pad_token_id = 0  # unk
model.config.bos_token_id = 1
model.config.eos_token_id = 2

model.eval()
# model = model.merge_and_unload()
model = torch.compile(model)
print("reached here")
print(model.training)
add_eos_token: bool = False
cutoff_len = CUTOFF_LEN = 256
train_on_inputs = False
prompt_template_name: str = "alpaca"
model.eval()

model.training



def evaluate(
    input_ids,
    # instruction,
    # input=None,
    temperature=0.1,
    top_p=0.75,
    top_k=40,
    num_beams=4,
    # max_new_tokens is set to 8, as for our model, only a single word prediction is needed
    max_new_tokens=32,
    stream_output=False,
    **kwargs,
):
    # prompt = prompter.generate_prompt(instruction, input)
    # inputs = tokenizer(prompt, return_tensors="pt")
    # input_ids = inputs["input_ids"].to(device)
    input_ids = torch.tensor(input_ids).unsqueeze(0).to(device)
    generation_config = GenerationConfig(
        temperature=temperature,
        top_p=top_p,
        top_k=top_k,
        num_beams=num_beams,
        **kwargs,
    )

    generate_params = {
        "input_ids": input_ids,
        "generation_config": generation_config,
        "return_dict_in_generate": True,
        "output_scores": True,
        "max_new_tokens": max_new_tokens,
    }

    if stream_output:
        # Stream the reply 1 token at a time.
        # This is based on the trick of using 'stopping_criteria' to create an iterator,
        # from https://github.com/oobabooga/text-generation-webui/blob/ad37f396fc8bcbab90e11ecf17c56c97bfbd4a9c/modules/text_generation.py#L216-L243.

        def generate_with_callback(callback=None, **kwargs):
            kwargs.setdefault(
                "stopping_criteria", transformers.StoppingCriteriaList()
            )
            kwargs["stopping_criteria"].append(
                Stream(callback_func=callback)
            )
            with torch.no_grad():
                model.generate(**kwargs)

        def generate_with_streaming(**kwargs):
            return Iteratorize(
                generate_with_callback, kwargs, callback=None
            )

        with generate_with_streaming(**generate_params) as generator:
            for output in generator:
                # new_tokens = len(output) - len(input_ids[0])
                decoded_output = tokenizer.decode(output)

                if output[-1] in [tokenizer.eos_token_id]:
                    break

                return prompter.get_response(decoded_output)
        return  # early return for stream_output

    # Without streaming
    with torch.no_grad():
        generation_output = model.generate(
            input_ids=input_ids,
            generation_config=generation_config,
            return_dict_in_generate=True,
            output_scores=True,
            max_new_tokens=max_new_tokens,
        )
    s = generation_output.sequences[0]
    output = tokenizer.decode(s)
    return prompter.get_response(output)



def tokenize(prompt, add_eos_token=True):
    # there's probably a way to do this with the tokenizer settings
    # but again, gotta move fast
    result = tokenizer(
        prompt,
        truncation=True,
        max_length=cutoff_len,
        padding=False,
        return_tensors=None,
    )
    if (
        result["input_ids"][-1] != tokenizer.eos_token_id
        and len(result["input_ids"]) < cutoff_len
        and add_eos_token
    ):
        result["input_ids"].append(tokenizer.eos_token_id)
        result["attention_mask"].append(1)

    # result["labels"] = result["input_ids"].copy()

    return result


def generate_and_tokenize_prompt(data_point):
    full_prompt = prompter.generate_prompt(
        data_point["instruction"],
        data_point["input"],
        # data_point["output"],
    )
    tokenized_full_prompt = tokenize(full_prompt)
    # if not train_on_inputs:
    #     user_prompt = prompter.generate_prompt(
    #         data_point["instruction"], data_point["input"]
    #     )
    #     tokenized_user_prompt = tokenize(
    #         user_prompt, add_eos_token=add_eos_token
    #     )
    #     user_prompt_len = len(tokenized_user_prompt["input_ids"])

    #     if add_eos_token:
    #         user_prompt_len -= 1

    #     tokenized_full_prompt["labels"] = [
    #         -100
    #     ] * user_prompt_len + tokenized_full_prompt["labels"][
    #         user_prompt_len:
    #     ]  # could be sped up, probably
    return tokenized_full_prompt

from tqdm import tqdm
dataset_name = "solid_extended"
data_path = f"{dataset_name}.json"
from datasets import load_dataset
data = load_dataset("json", data_files=data_path)


# train_val = data["train"].train_test_split(
#     test_size=200, shuffle=True, seed=42
# )
data = (
    data["train"].shuffle().map(generate_and_tokenize_prompt)
)
# data.set_format("torch", columns=["input", "input_ids", "attention_mask", "output"])
# val_data = (
#     train_val["test"].shuffle().map(generate_and_tokenize_prompt)
# )
print(data[0])
# answer = evaluate(data[0]["instruction"], data[0]["input"]

inputs = []
predictions = []
real_answers = []

inputs

for i in tqdm(range(100)):
    # print(real_answer)
    try:
      model_answer = evaluate(data[i]["input_ids"])
      real_answer = data[i]["output"]
      input_text = data["input"][i]
    except:
      continue
    inputs.append(input_text)
    real_answers.append(real_answer)
    predictions.append(model_answer)


# from pprint import pprint
# pprint(predictions)
# print("="*100)
# pprint(real_answers)
# print("="*100)
# predictions = [evaluate(data[i]["instruction"], data[i]["input"]) for i in range(100)]



current_test= {"dataset": dataset_name, "inputs": inputs, "predictions": predictions, "real_answers": real_answers}

current_test['dataset']

import pickle

# a = {'hello': 'world'}
pickle_file_name = f'llama_default_{dataset_name}_100_test.pickle'
with open(pickle_file_name, 'wb') as handle:
    pickle.dump(current_test, handle, protocol=pickle.HIGHEST_PROTOCOL)

print(pickle_file_name)

!cp llama_default_solid_extended_100_test.pickle /content/drive/MyDrive/ml-models/llama_training_reddit_colab_1_ep_128b/

real_answers

real_answers

predictions

predictions

